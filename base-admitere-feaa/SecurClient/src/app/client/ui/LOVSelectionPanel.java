/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * VOSelectionPanel.java
 *
 * Created on Jul 13, 2010, 4:04:27 PM
 */

package app.client.ui;

import app.domain.model.AppUser;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import org.jdesktop.swingbinding.JListBinding;

/**
 *
 * @author catalin.strimbei
 *
 * Get
 * - a list of objects to be selected
 * - a list of columns to be displayed
 *
 * Return
 * - list of selected objects
 *
 */
public class LOVSelectionPanel extends javax.swing.JPanel{

    /** Creates new form VOSelectionPanel */
    private static final Object lockObject = new Object();
    private Component parentForm;

    private LOVSelectionPanel(String message, List valueObjects, String propertyName, Component parentForm) {
        this.parentForm = parentForm;
        initComponents();
        this.valueObjects.addAll(valueObjects);
        this.messageLabel.setText(message);

        setBindingLovSelectionList(propertyName);

        this.bindingGroup.unbind();
        this.bindingGroup.bind();
    }

    private void setBindingLovSelectionList(String property){
        org.jdesktop.swingbinding.JListBinding bindingLov = (JListBinding) this.bindingGroup.getBinding("lovSelectionListElementsBind");
        bindingLov.unbind();
        if (bindingLov != null){
            String propertyBindingExpression = "${" + property + "}";
            System.out.println("Changed binding " + bindingLov.getName() + "/" + propertyBindingExpression);
            bindingLov.setDetailBinding(org.jdesktop.beansbinding.ELProperty.create(propertyBindingExpression));
            bindingLov.bind();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        valueObjects = new java.util.ArrayList();
        selectedObjects = new java.util.ArrayList();
        messageLabel = new javax.swing.JLabel();
        btnSelect = new javax.swing.JButton();
        btnAbandon = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lovSelectionList = new javax.swing.JList();

        messageLabel.setText("... message ....");

        btnSelect.setText("Select");
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });

        btnAbandon.setText("Abandon");
        btnAbandon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbandonActionPerformed(evt);
            }
        });

        org.jdesktop.swingbinding.JListBinding jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, valueObjects, lovSelectionList, "lovSelectionListElementsBind");
        bindingGroup.addBinding(jListBinding);
        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${selectedObjects}"), lovSelectionList, org.jdesktop.beansbinding.BeanProperty.create("selectedElements"));
        bindingGroup.addBinding(binding);

        jScrollPane1.setViewportView(lovSelectionList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                    .addComponent(messageLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btnSelect, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAbandon, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(messageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSelect)
                    .addComponent(btnAbandon))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
        parentForm.setVisible(false);

        
    }//GEN-LAST:event_btnSelectActionPerformed

    private void btnAbandonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbandonActionPerformed
        this.selectedObjects.clear();
        btnSelectActionPerformed(evt);
    }//GEN-LAST:event_btnAbandonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbandon;
    private javax.swing.JButton btnSelect;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList lovSelectionList;
    private javax.swing.JLabel messageLabel;
    private java.util.ArrayList selectedObjects;
    private java.util.ArrayList valueObjects;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the selectedObjects
     */
    public java.util.ArrayList getSelectedObjects() {
        return selectedObjects;
    }

    /**
     * @param selectedObjects the selectedObjects to set
     */
    public void setSelectedObjects(java.util.ArrayList selectedObjects) {
        this.selectedObjects = selectedObjects;
    }

    public static List showSelectionDialog(String message, List valueObjects, String propertyName, Component component){
//        Window window = getWindowForComponent(component);
        LOVSelectionPanel panel = new LOVSelectionPanel(message, valueObjects, propertyName, null);
        JDialog dialog = panel.createDialog(component);
        dialog.show();
        return panel.selectedObjects;
    }

    private JDialog createDialog(Component component)
            throws HeadlessException {

        final JDialog dialog;
        Window window = getWindowForComponent(component);
        if (window instanceof Frame) {
            dialog = new JDialog((Frame)window, "LOV Selection Form", true);
        } else {
            dialog = new JDialog((Dialog)window, "LOV Selection Form", true);
        }

        dialog.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                System.out.println("Closing Event Delegate !");
                WindowEvent wev = new WindowEvent((JDialog)evt.getSource(), WindowEvent.WINDOW_CLOSING);
                Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(wev);
            }
        });

        dialog.getContentPane().add(this);
        this.parentForm = dialog;
        
        dialog.setResizable(false);
        dialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);

        dialog.pack();

        

            int xMain = window.getX();
            int yMain = window.getY();
            int wMain = window.getWidth();
            int hMain = window.getHeight();
            int w = dialog.getWidth();
            int h = dialog.getHeight();

            int xiFrame = xMain + ((wMain - w)/6);
            int yiFrame = yMain + ((hMain - h)/3);

            dialog.setLocation(xiFrame, yiFrame);
        

        return dialog;
    }

    public static void main(String args[]){
       List<app.domain.model.AppUser> users = new ArrayList<AppUser>();
       users.add(new AppUser(1, "U1"));
       users.add(new AppUser(2, "U2"));
       users.add(new AppUser(3, "U3"));
        
       List selected = LOVSelectionPanel.showSelectionDialog("Selectati un user: ", users, "dbUser",
               getWindowForComponent(new JFrame()));
       for (Object o : selected){
           System.out.println("Selected: " + o);
       }
       System.out.println("Exit " + selected.size());
    }

    private static Window getWindowForComponent(Component parentComponent)
        throws HeadlessException {
        if (parentComponent == null)
            return null;
        if (parentComponent instanceof Frame || parentComponent instanceof Dialog)
            return (Window)parentComponent;
        return getWindowForComponent(parentComponent.getParent());
    }
}